{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":"<p>Um bot para discord para programadores.</p>"},{"location":"#como-iniciar","title":"Como iniciar?","text":"<p>Requisitos: </p> <p>Token do discord ( Discord developers )</p>"},{"location":"Uso%20do%20Bot/","title":"Getting started","text":""},{"location":"api/Bot/","title":"Vis\u00e3o Geral","text":"<p>Classe para iniciar o bot.</p> <p>Extende de discord.ext.commands.Bot</p> <p>Parameters:</p> Name Type Description Default <code>servers</code> <code>list[int]</code> <p>Lista opcional de servidores, vem diretamente do arquivo config.ini, deixando em branco ira aplicar a todos os servidores em que este bot for adicionado</p> <code>[]</code> Source code in <code>edward\\bot.py</code> <pre><code>class Bot(commands.Bot):\n\"\"\"\n    Classe para iniciar o bot.\n\n    Extende de [discord.ext.commands.Bot](https://discordpy.readthedocs.io/en/stable/ext/commands/index.html)\n    Args:\n        servers: Lista opcional de servidores, vem diretamente do arquivo config.ini, deixando em branco ira aplicar a todos os servidores em que este bot for adicionado\n\n    \"\"\"\n\n    def __init__(self, servers: list[int] = []):\n        intents = discord.Intents.default()\n        intents.message_content = True\n        self.sync = False\n        self.servers = (\n            [discord.Object(id=server) for server in servers]\n            if len(servers) &gt; 0\n            else None\n        )\n        super().__init__(command_prefix=\"/\", intents=intents)\n\n    async def setup_hook(self):\n\"\"\"\n        Fun\u00e7\u00e3o setup para for\u00e7ar a sincroniza\u00e7\u00e3o de todos os commandos.\n        \"\"\"\n        if not self.sync:\n            for command in COGS_DIR.glob(\"*.py\"):\n                if command.name != \"__init__.py\":\n                    await self.load_extension(f\"edward.cogs.{command.name[:-3]}\")\n\n            await self.tree.sync(guild=self.servers)\n\n        print(\"BOT Started\")\n\n    async def on_message(self, message: discord.Message):\n\"\"\"\n        Fun\u00e7\u00e3o para interceptar todas as mensagens que o bot tem acesso para aplicar os comandos.\n        \"\"\"\n        if message.author == self.user:\n            return\n        if message.author.id == 966359640029933588:\n            ctx = await self.get_context(message)\n            if ctx.valid:\n                await self.invoke(ctx)\n\n        await self.process_commands(message)\n</code></pre>"},{"location":"api/Bot/#bot.Bot.on_message","title":"<code>on_message(message)</code>  <code>async</code>","text":"<p>Fun\u00e7\u00e3o para interceptar todas as mensagens que o bot tem acesso para aplicar os comandos.</p> Source code in <code>edward\\bot.py</code> <pre><code>async def on_message(self, message: discord.Message):\n\"\"\"\n    Fun\u00e7\u00e3o para interceptar todas as mensagens que o bot tem acesso para aplicar os comandos.\n    \"\"\"\n    if message.author == self.user:\n        return\n    if message.author.id == 966359640029933588:\n        ctx = await self.get_context(message)\n        if ctx.valid:\n            await self.invoke(ctx)\n\n    await self.process_commands(message)\n</code></pre>"},{"location":"api/Bot/#bot.Bot.setup_hook","title":"<code>setup_hook()</code>  <code>async</code>","text":"<p>Fun\u00e7\u00e3o setup para for\u00e7ar a sincroniza\u00e7\u00e3o de todos os commandos.</p> Source code in <code>edward\\bot.py</code> <pre><code>async def setup_hook(self):\n\"\"\"\n    Fun\u00e7\u00e3o setup para for\u00e7ar a sincroniza\u00e7\u00e3o de todos os commandos.\n    \"\"\"\n    if not self.sync:\n        for command in COGS_DIR.glob(\"*.py\"):\n            if command.name != \"__init__.py\":\n                await self.load_extension(f\"edward.cogs.{command.name[:-3]}\")\n\n        await self.tree.sync(guild=self.servers)\n\n    print(\"BOT Started\")\n</code></pre>"},{"location":"api/Bot/Comandos/Cogs/Cheatsheets/","title":"Cheatsheet","text":""},{"location":"api/Bot/Comandos/Cogs/Cheatsheets/#classe-principal","title":"Classe principal","text":"<p>Comando para fazer a consulta de cheatsheets</p>"},{"location":"api/Bot/Comandos/Cogs/Cheatsheets/#cogs.cheatsheet.CheatSheet--como-usar","title":"Como usar?","text":"<pre><code>/cheatsheet assunto &lt;assunto&gt; busca &lt;termo de busca&gt;\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>assunto</code> <p>Index do assunto para realizar a busca</p> required <code>busca</code> <p>Termo para realizar a busca</p> required <p>Este comando busca no meilisearch os comandos de acordo com a busca e retorna um embed com os links para a documenta\u00e7\u00e3o</p> Source code in <code>cogs\\cheatsheet.py</code> <pre><code>class CheatSheet(commands.Cog):\n\"\"\"__Comando para fazer a consulta de cheatsheets__\n\n    ## Como usar?\n    ```\n    /cheatsheet assunto &lt;assunto&gt; busca &lt;termo de busca&gt;\n    ```\n    Args:\n        assunto: Index do assunto para realizar a busca\n        busca: Termo para realizar a busca\n    Este comando busca no meilisearch os comandos de acordo com a busca e retorna um embed com os links para a documenta\u00e7\u00e3o\n    \"\"\"\n\n    def __init__(self):\n        self.client = meilisearch.Client(\"http://localhost:7700\")\n\n        self.indexes = [index.uid for index in self.client.get_indexes()[\"results\"]]\n        super().__init__()\n\n    @app_commands.command(\n        name=\"cheatsheet\", description=\"Dicas para comandos previamente salvos\"\n    )\n    async def cheatsheet(\n        self, interaction: discord.Interaction, assunto: str, busca: str\n    ):\n        try:\n            embed = search(\n                subject=assunto, search=busca, subjects=self.indexes, client=self.client\n            )\n        except SubjectNotFound:\n            await interaction.response.send_message(\n                f\"Assunto inv\u00e1lido, os assuntos disponiveis s\u00e3o: {', '.join(self.indexes)}\",\n                ephemeral=True,\n            )\n            return\n        except SearchNotFound:\n            await interaction.response.send_message(\"Nada encontrado\", ephemeral=True)\n            return\n\n        await interaction.response.send_message(embed=embed)\n</code></pre>"},{"location":"api/Bot/Comandos/Cogs/Cheatsheets/#funcao-de-busca","title":"Fun\u00e7\u00e3o de busca","text":"<p>Fun\u00e7\u00e3o que faz a busca no Meiliesearch</p> <p>Parameters:</p> Name Type Description Default <code>subject</code> <code>str</code> <p>Index para busca no meilisearch</p> required <code>search</code> <code>str</code> <p>Termo de busca</p> required <code>subjects</code> <code>list[str]</code> <p>Lista de assuntos permitidos</p> required <code>client</code> <code>meilisearch.Client</code> <p>O Client do meilisearch</p> required <p>Raises:</p> Type Description <code>SubjectNotFound</code> <p>Erro quando o assunto n\u00e3o esta na lista de index no meilisearch</p> <code>SearchNotFound</code> <p>Erro quando a busca retorna vazia</p> <p>Returns:</p> Name Type Description <code>Embed</code> <code>discord.Embed</code> <p>Retorna um embed do discord</p> Source code in <code>cogs\\cheatsheet.py</code> <pre><code>def search(\n    subject: str, search: str, subjects: list[str], client: meilisearch.Client\n) -&gt; discord.Embed:\n\"\"\"_Fun\u00e7\u00e3o que faz a busca no Meiliesearch_\n    Args:\n        subject: _Index para busca no meilisearch_\n        search: _Termo de busca_\n        subjects: _Lista de assuntos permitidos_\n        client: _O Client do meilisearch_\n    Raises:\n        SubjectNotFound: _Erro quando o assunto n\u00e3o esta na lista de index no meilisearch_\n        SearchNotFound: _Erro quando a busca retorna vazia_\n\n    Returns:\n        Embed: _Retorna um embed do discord_\n    \"\"\"\n    if subject not in subjects:\n        raise SubjectNotFound()\n\n    hits = client.index(subject).search(search)\n    embed = discord.Embed()\n    embed.title = \"Areas Possiveis:\"\n    if len(hits[\"hits\"]) &lt;= 0:\n        raise SearchNotFound()\n\n    for hit in hits[\"hits\"]:\n        title = hit[\"title\"]\n        slug = slugify(title, \"-\")\n        url = f\"http://127.0.0.1:8000/cheatsheets/{subject}#{slug}\"\n\n        simple = f\"{hit['content'][0:50]}...\"\n        embed.add_field(name=title, value=f\"[{simple}]({url})\", inline=False)\n\n    return embed\n</code></pre>"},{"location":"cheatsheets/","title":"Como Colaborar","text":"<p>Adicione um arquivo em markdown nesse repositorio git</p>"},{"location":"cheatsheets/docker/","title":"Docker Cheat Sheet","text":""},{"location":"cheatsheets/docker/#instalacao","title":"Instala\u00e7\u00e3o","text":"<ul> <li>Windows</li> <li>Linux</li> <li>Mac</li> </ul>"},{"location":"cheatsheets/docker/#windows","title":"Windows","text":"<p>Qualquer duvida olhe na documenta\u00e7\u00e3o oficial</p> <p></p>"},{"location":"cheatsheets/docker/#wsl2","title":"WSL2","text":"<p>Primeiro deve instalar o WSL2</p> <ol> <li>Abra o seu terminal como administrador</li> <li>Execute o comando <code>wsl --install</code></li> <li>Reinicie o computador</li> </ol> <p></p>"},{"location":"cheatsheets/docker/#docker-desktop","title":"Docker Desktop","text":"<ol> <li>Fa\u00e7a o download do docker desktop</li> <li>Siga as instru\u00e7\u00f5es de instala\u00e7\u00e3o</li> <li>Execute o docker desktop pelo atalho no desktop ou no iniciar.</li> </ol>"},{"location":"cheatsheets/git/","title":"Git Cheat Sheet","text":""},{"location":"cheatsheets/git/#iniciar-novo-repositorio","title":"Iniciar novo reposit\u00f3rio","text":"<p>Passos para cria\u00e7\u00e3o de um reposit\u00f3rio</p> <pre><code>\ngit init\n\ngit add .\n\ngit commit -m \"first commit\"\n\n# Parametro\n# -M: renomeia a branch atual para a nova selecionada\ngit branch -M main\n\ngit remote add origin &lt;url do reposit\u00f3rio&gt;\n\n#Parametro\n# -u: Faz a branch main a upstream ( ou seja a principal para upload no remoto )\ngit push -u origin main\n\n</code></pre> <p></p>"},{"location":"cheatsheets/git/#branches","title":"Branches","text":"<p>Criar branch e trocar para ela</p> <pre><code># Parametro\n# -b: Ap\u00f3s a cria\u00e7\u00e3o ele troca para a branch criada\n\ngit checkout -b &lt;branchname&gt;\n</code></pre>"}]}